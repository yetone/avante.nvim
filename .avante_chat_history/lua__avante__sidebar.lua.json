[{"provider": "groq", "timestamp": "2024-08-18 13:11:07", "model": "llama-3.1-70b-versatile", "response": "Replace lines: 127-128\n```lua\nlocal layout = Config.get_renderer_layout_options()\nlocal split_command = \"botright vs \" .. layout.width\n```\nwith\n```lua\nlocal layout = Config.get_renderer_layout_options()\nlocal split_command = \"botright vs \" .. layout.width\nlocal function adjust_sidebar_width(width)\n  vim.api.nvim_win_set_width(self.view.win, width)\n  self.renderer:set_size({ width = width, height = layout.height })\nend\n\nlocal function increase_sidebar_width()\n  local new_width = vim.api.nvim_win_get_width(self.view.win) + 10\n  adjust_sidebar_width(new_width)\nend\n\nlocal function decrease_sidebar_width()\n  local new_width = vim.api.nvim_win_get_width(self.view.win) - 10\n  if new_width < 10 then\n    new_width = 10\n  end\n  adjust_sidebar_width(new_width)\nend\n\nvim.keymap.set(\"n\", \"<C-=>\", increase_sidebar_width, { buffer = self.view.buf, noremap = true, silent = true })\nvim.keymap.set(\"n\", \"<C-->\", decrease_sidebar_width, { buffer = self.view.buf, noremap = true, silent = true })\n```\nThis modification adds two new functions `increase_sidebar_width` and `decrease_sidebar_width` to adjust the width of the sidebar. It also sets up two keymaps `<C-=>` and `<C-->` to increase and decrease the sidebar width respectively.", "request": "how to make the sidebar dynamic in terms making the width wider with keymaps"}, {"provider": "groq", "timestamp": "2024-08-18 13:11:07", "model": "llama-3.1-70b-versatile", "response": "Replace lines: 127-128\n```lua\nlocal layout = Config.get_renderer_layout_options()\nlocal split_command = \"botright vs \" .. layout.width\n```\nwith\n```lua\nlocal layout = Config.get_renderer_layout_options()\nlocal split_command = \"botright vs \" .. layout.width\nlocal function adjust_sidebar_width(width)\n  vim.api.nvim_win_set_width(self.view.win, width)\n  self.renderer:set_size({ width = width, height = layout.height })\nend\n\nlocal function increase_sidebar_width()\n  local new_width = vim.api.nvim_win_get_width(self.view.win) + 10\n  adjust_sidebar_width(new_width)\nend\n\nlocal function decrease_sidebar_width()\n  local new_width = vim.api.nvim_win_get_width(self.view.win) - 10\n  if new_width < 10 then\n    new_width = 10\n  end\n  adjust_sidebar_width(new_width)\nend\n\nvim.keymap.set(\"n\", \"<C-=>\", increase_sidebar_width, { buffer = self.view.buf, noremap = true, silent = true })\nvim.keymap.set(\"n\", \"<C-->\", decrease_sidebar_width, { buffer = self.view.buf, noremap = true, silent = true })\n```\nThis modification adds two new functions `increase_sidebar_width` and `decrease_sidebar_width` to adjust the width of the sidebar. It also sets up two keymaps `<C-=>` and `<C-->` to increase and decrease the sidebar width respectively.", "request": "how to make the sidebar dynamic in terms making the width wider with keymaps"}]